// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

// #define RISING_EDGE

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif



// ------------- //
// read_bus_data //
// ------------- //

#define read_bus_data_wrap_target 0
#define read_bus_data_wrap 2

#ifdef RISING_EDGE
// code section for rising  edge trigger
static const uint16_t read_bus_data_program_instructions[] = {
            //     .wrap_target
    0x202f, //  0: wait   0 pin, 15                  
    0x20af, //  1: wait   1 pin, 15                  
    0x4000, //  2: in     pins, 32                   
            //     .wrap
};
#endif

#ifndef RISING_EDGE
// code section for falling edge trigger
static const uint16_t read_bus_data_program_instructions[] = {
            //     .wrap_target
    0x20af, //  0: wait   1 pin, 15                  
    0x242f, //  1: wait   0 pin, 15              [4] 
    0x4000, //  2: in     pins, 32                   
            //     .wrap
};

#endif

#if !PICO_NO_HARDWARE
static const struct pio_program read_bus_data_program = {
    .instructions = read_bus_data_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config read_bus_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + read_bus_data_wrap_target, offset + read_bus_data_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
void read_bus_data_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    // configure all pins as input
    // pio_sm_set_consecutive_pindirs(pio, sm, 0, 32, false);
// define input according to design
pio_sm_set_consecutive_pindirs(pio, sm, 0, 8, false);
pio_sm_set_consecutive_pindirs(pio, sm, 14, 2, false);
pio_sm_set_consecutive_pindirs(pio, sm, 26, 4, false);
    // configure the state machine
    pio_sm_config c = read_bus_data_program_get_default_config(offset);
    sm_config_set_in_pins(&c, 0);  // Pin assignment start at 0
    sm_config_set_in_shift(&c, false, true, 32); // ISR leftward, autopush, 32 threshold
    // initialize and enable the state machine
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
